import {html} from "htm/preact";
import {ExploitMethod} from "./app";
import {ExploitAvailability} from "../../src/library";

declare interface ExploitCardProps {
    exploit: ExploitMethod;
    avail: ExploitAvailability;
    firmware?: string;

}

export function ExploitCard(props: ExploitCardProps) {
    const exploit = props.exploit;
    const avail = props.avail;
    const firmware = props.firmware ?? avail.patched?.version;
    const patched = (avail.patched && firmware && firmware >= avail.patched.version) || false;
    const mayPatched = !patched && (avail.latest && firmware && firmware > avail.latest.version) || false;
    const bgClass = patched ? 'bg-danger-subtle' : mayPatched ? 'bg-warning-subtle' : 'bg-success-subtle';
    const iconClass = patched ? 'bi-exclamation-octagon-fill' : mayPatched ?
        'bi-question-octagon-fill' : 'bi-hand-thumbs-up-fill';
    return (html`
          <div class=${`card p-3 mt-3 ${bgClass}`}>
            <h3>
              <i class="bi ${iconClass} me-2"/>
              <a class="stretched-link text-decoration-none" href=${exploit.url}
                 target="_blank">${exploit.name}</a>
            </h3>
            ${avail.latest && html`
              <div>
                <i class="bi bi-info-circle-fill me-2"/>Latest known working firmware: <b>${avail.latest?.version}
              </b>${mayPatched && props.firmware && html` (you have <b>${props.firmware}</b>)`}
              </div>
            `}
            ${avail.patched && html`
              <div><i class="bi bi-bandaid-fill me-2"/>Patched in: <b>${avail.patched?.version}</b>
                ${props.firmware && html` (you have <b>${props.firmware}</b>)`}
              </div>
            `}
            ${exploit.expert && html`
              <div>
                <i class="bi bi-exclamation-triangle-fill me-2"/>Requires expert knowledge.
              </div>
            `}
          </div>
        `
    );
}